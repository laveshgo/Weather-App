{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","date","Date","getDay","toLocaleDateString","year","month","day","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLACMA,EACE,mCADFA,EAEG,2CA6DMC,MA1Df,WAEI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KAmBIC,EAAO,IAAIC,KAGjB,OAFED,EAPW,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAO7DA,EAAKE,UAAW,KAAMF,EAAKG,mBAAmB,QAN3C,CACZC,KAAM,UACNC,MAAO,OACPC,IAAK,YAMP,qBAAKC,UAAmC,oBAAhBT,EAAQU,MAAyBV,EAAQU,KAAKC,KAAO,GAAM,WAAsB,MAAzG,SACE,iCACG,qBAAKF,UAAU,aAAf,SACE,uBACCG,KAAK,OACLH,UAAY,aACZI,YAAa,YACbC,SAAW,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOC,QAClCA,MAAOnB,EACPoB,WA9BO,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAI1B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzD2B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ1B,EAAS,IACTE,EAAWwB,GACXC,QAAQC,IAAIF,WA2BY,oBAAhBzB,EAAQU,KACf,gCACG,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BT,EAAQ4B,KAAnC,KAA2C5B,EAAQ6B,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SAAuBP,OAEzB,sBAAKO,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGsB,KAAKC,MAAMhC,EAAQU,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0BT,EAAQA,QAAQ,GAAGU,aAGhD,SC9CEuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b5c5d74c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api = {\n  key : \"5c532067a2fa364bbe8cfa815ee996b4\",\n  base : \"https://api.openweathermap.org/data/2.5/\"\n} \n\nfunction App() {\n  \n    const [query,setQuery] =useState('');\n    const [weather ,setWeather] =useState(\"\");\n    \n    const search = evt => {\n      if(evt.key === \"Enter\"){\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setQuery(\"\");\n          setWeather(result)\n          console.log(result);\n      });\n      }\n    }\n    var days = ['Sunday','Monday','Tuesday','Wednesday','Thrusday','Friday','Saturday'];\n    var options = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    };\n    let date = new Date();\n    date =days[date.getDay()] +\", \"+ date.toLocaleDateString(\"en-US\", options);\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? \"app-warm\" : \"app\") : \"app\"}>\n      <main>     \n         <div className=\"search-box\">\n           <input\n            type=\"text\"\n            className = \"search-bar\"\n            placeholder =\"Search...\"\n            onChange={ e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n         </div> \n\n         {(typeof weather.main != \"undefined\") ? (\n           <div>\n              <div className=\"location-box\">\n                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                <div className=\"date\">{date}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°C\n                </div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n         ) :(\"\")}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}